  name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - main
  jobs:
    unit-test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Set up JDK 21
          uses: actions/setup-java@v4
          with:
            java-version: '21'
            distribution: 'temurin'
            cache: maven
        - run: mvn -B verify --file pom.xml
        - name: Generate JaCoCo Badge
          id: jacoco
          uses: cicirello/jacoco-badge-generator@v2.0.1
        - name: Log coverage percentage
          run: |
            echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
            echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
        - name: Upload JaCoCo coverage report
          uses: actions/upload-artifact@v4.4.0
          with:
            name: jacoco-report
            path: target/site/jacoco/
    build:
      runs-on: ubuntu-latest
      needs: unit-test
      steps:
        - uses: actions/checkout@v4
        - name: Set up JDK 21
          uses: actions/setup-java@v4
          with:
            java-version: '21'
            distribution: 'temurin'
            cache: maven
        - name: Build with Maven
          run: mvn -B package --file pom.xml

    deploy-ecr:
      name: Deploy AWS ECR
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            QUARKUS_DATASOURCE_JDBC_URL: ${{ secrets.QUARKUS_DATASOURCE_JDBC_URL }}
            QUARKUS_DATASOURCE_USERNAME: ${{ secrets.QUARKUS_DATASOURCE_USERNAME }}
            QUARKUS_DATASOURCE_PASSWORD: ${{ secrets.QUARKUS_DATASOURCE_PASSWORD }}
            IMAGE_TAG: latest
          run: |
            docker build -f src/main/docker/Dockerfile.jvm \
            --build-arg QUARKUS_DATASOURCE_JDBC_URL=$QUARKUS_DATASOURCE_JDBC_URL \
            --build-arg QUARKUS_DATASOURCE_USERNAME=$QUARKUS_DATASOURCE_USERNAME \
            --build-arg QUARKUS_DATASOURCE_PASSWORD=$QUARKUS_DATASOURCE_PASSWORD \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    deploy-eks:
      name: Deploy AWS EKS
      runs-on: ubuntu-latest
      needs: deploy-ecr
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1

        - name: Config EKS
          run: aws eks update-kubeconfig --name deliverynow-eks --region us-east-1

        - name: Clean pods to EKS
          run: |
            kubectl delete -k ./k8s
          continue-on-error: true

        - name: Deploy to EKS
          run: |
            kubectl apply -k ./k8s
